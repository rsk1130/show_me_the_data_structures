import hashlib
from datetime import date
import time


timestamp = str(date.fromtimestamp(time.time()))
current_time = time.strftime("%H:%M:%S", time.localtime())


class LinkedList():
    def __init__(self):
        self.head = None

    def append(self, value):
        """ Append a value to the end of the list. """
        # TODO: Write function to append here
        if self.head is None:
            self.head = Block(timestamp + current_time, value)
            return
        block = self.head
        while block.next:
            block = block.next
        block.next = Block(timestamp + current_time, value, block.hash)

    def to_list(self):
        out = []
        block = self.head
        while block:
            out.append(block.data)
            block = block.next
        return out


class Block:
    def __init__(self, time_stamp, data, previous_hash=None):
        self.timestamp = time_stamp
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calc_hash(time_stamp + data)
        self.next = None

    def calc_hash(self, string):
        sha = hashlib.sha256()
        hash_str = string.encode('utf-8')
        sha.update(hash_str)
        return sha.hexdigest()


blockchain = LinkedList()
blockchain.append("Block 1: Head data")
blockchain.append("Block 2: here's some data")
blockchain.append("Block 3: have some more data")
blockchain.append("Block 4: SO MUCH DATA")

print("Head previous hash (should be none)")
print(blockchain.head.previous_hash)
print("Head hash")
print(blockchain.head.hash)
print("Block 2 previous hash (should be same as head hash)")
print(blockchain.head.next.previous_hash)
print("Block 2 hash)")
print(blockchain.head.next.hash)
print("Block 3 previous hash (should be same as block 2 hash)")
print(blockchain.head.next.next.previous_hash)
print("Block 3 hash")
print(blockchain.head.next.next.hash)
print("Block 4 previous hash (should be same as block 3 hash)")
print(blockchain.head.next.next.next.previous_hash)
print("Block 4 hash")
print(blockchain.head.next.next.next.hash)

print("Block after block 4 (should be none)")
print(blockchain.head.next.next.next.next)

print(blockchain.to_list())
